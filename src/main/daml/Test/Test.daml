--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

{-# LANGUAGE ApplicativeDo #-}

module Test.Test where

import DA.Assert
import DA.Date
import DA.Time
import Daml.Script
import Actors.Compliance
import Actors.DeskHead
import Actors.Operator
import Actors.SigningParty
import Actors.Trader
import Bitcoin.Types
import Desk.Limit
import Transfer.Address
import Transfer.Request
import Transfer.Transfer
import Test.OnboardingScript

getTransferAndUTXO : ScriptPartiesHelper -> ScriptContractsHelper -> BitcoinAddress -> Satoshi -> Satoshi -> Script (ContractId UncheckedTransferRequest, ContractId UTXO)
getTransferAndUTXO parties contracts address satoshiAmount fee = script do

  -- Create a UTXO and update the balance at owned address accordingly
  ownedAddressCid <- parties.signingParty `submit` exerciseCmd contracts.signCid RegisterOwnedAddress with address = address
  let utxoData = UTXOData with
                   address = address
                   txHash = TxHash "some tx hash"
                   blockHeight = 1
                   outputIdx = 1
                   value = satoshiAmount `plus` fee
                   confirmed = Some (time (date 2019 Aug 22) 0 0 0)
                   sigScript = ScriptPubKey "some sig script"
  reqUTXOUpdateCid <- submit parties.operator do
    exerciseCmd contracts.oemCid RequestUTXOUpdate
  utxoCid <- parties.operator `submit` do
    utxoCid <- exerciseCmd contracts.oemCid RegisterUTXO with utxoData = utxoData
    exerciseCmd ownedAddressCid UpdateBalance with
      newBalance = satoshiAmount
      newNumTxs = 2
    exerciseCmd reqUTXOUpdateCid AckUTXOUpdateRequest
    return utxoCid

  -- Get a new transfer request
  transferRequestCid <-
    parties.trader `submit` exerciseCmd contracts.traderCid
      RequestTransfer with
        amount = satoshiAmount
        address = address

  return (transferRequestCid, utxoCid)

transmit : ScriptPartiesHelper -> ScriptContractsHelper -> ContractId ValidatedTransferRequest -> Satoshi -> ContractId UTXO -> Script (Either InsufficientTransferRequest TransmittedTransfer)
transmit parties contracts transferRequestCid fee utxoCid = script do
  transferCid1 <- parties.operator `submit` exerciseCmd transferRequestCid PrepareToTransfer with
      signingPartyCid = contracts.signCid
      fee = fee
      availableTxInputCids = [utxoCid]
  case transferCid1 of
    Right newTransferCid -> do
      transferCid2 <- parties.signingParty `submit` exerciseCmd newTransferCid SignTransfer with
        rawTx = RawTx "some raw Tx"
      transferCid3 <- parties.trader `submit` exerciseCmd transferCid2 Confirm
      transferCid4 <- parties.operator `submit` exerciseCmd transferCid3 Transmit with
        message = "finalized"
      Some transfer <- queryContractId parties.operator transferCid4
      Right <$> return transfer
    Left insufficientTransferRequestCid -> do
      Some transfer2 <- queryContractId parties.operator insufficientTransferRequestCid
      Left <$> return transfer2

simpleSuccessfulTransfer = script do
  let fee = Satoshi 1
  let satoshiAmount = Satoshi 500

  (parties, contracts, address, _badAddress) <- onboarding

  (uncheckedTransferRequestCid, utxoCid) <- getTransferAndUTXO parties contracts address satoshiAmount fee

  transferRequestResult <- parties.operator `submit` exerciseCmd uncheckedTransferRequestCid ValidateRequest

  transferRequestCid1 <- case transferRequestResult of
      LimitFail _ -> fail "expected successful address check, but got address problems"
      ReputationFail _ -> fail "expected successful limit check, but got limit violation"
      ValidationSuccess transferRequestCid1 -> pure transferRequestCid1
  transfer <- transmit parties contracts transferRequestCid1 fee utxoCid
  let
    details = case transfer of
      Right newTransfer -> newTransfer.transferDetails
      Left insufficientTransferRequest -> insufficientTransferRequest.transferDetails
  details.amount === satoshiAmount

overrideFailedChecksAndTransmit = script do
  let
    fee = Satoshi 1
    satoshiAmount = satoshiLimit `plus` fee `plus` (Satoshi 1)

  (parties, contracts, _address, badAddress) <- onboarding

  (uncheckedTransferRequestCid, utxoCid) <- getTransferAndUTXO parties contracts badAddress satoshiAmount fee

  transferRequestResult <- parties.operator `submit` exerciseCmd uncheckedTransferRequestCid ValidateRequest

  failedRequestCid1 <- case transferRequestResult of
    LimitFail failedRequestCid1 -> pure failedRequestCid1
    ReputationFail _ -> fail "expected failure due to limit violation, but limit check successfully passed"
    ValidationSuccess _ -> fail "expected failure due to limit and address violation, but both checks successfully passed"
  (limitOverride, _) <- parties.deskHead `submit` exerciseCmd contracts.deskHeadCid ApproveRequestOverLimits with
    failedRequestCid = failedRequestCid1
    reason = "Desk head overrides limit failure"
    observers = []
  failedAddressCheckCid <- case limitOverride of
    Right _ -> fail "expected failure due to bad address, but address check successfully passed"
    Left failedAddressCheckCid -> pure failedAddressCheckCid
  (addressOverride, _) <- parties.complianceOfficer `submit` exerciseCmd contracts.complCid ApproveRequestToBadAddress with
        failedRequestCid = failedAddressCheckCid
        reason = "Compliance officer trusts this address"
        observers = []
  transfer <- transmit parties contracts addressOverride fee utxoCid
  let
    details = case transfer of
      Right newTransfer -> newTransfer.transferDetails
      Left insufficientTransferRequest -> insufficientTransferRequest.transferDetails
  details.amount === satoshiAmount

validTransferIncreasesLimitUsage = script do
  let fee = Satoshi 1
      goodAmount = Satoshi 1000
  (parties, contracts, goodAddress, _) <- onboarding

  (transferRequestCid, utxoCid) <- getTransferAndUTXO parties contracts goodAddress goodAmount fee

  transferRequestResult <- parties.operator `submit` exerciseCmd transferRequestCid ValidateRequest

  requestCid <- case transferRequestResult of
    ValidationSuccess requestCid -> pure requestCid
    LimitFail _ -> fail "expected transfer request to be valid, but failed limit check"
    ReputationFail _ -> fail "expected transfer request to be valid, but failed address check"
  parties.operator `submit` exerciseCmd requestCid PrepareToTransfer with
    signingPartyCid = contracts.signCid
    fee = fee
    availableTxInputCids = [utxoCid]
  newLimit <- findNewLimit parties contracts
  newLimit.used === goodAmount `plus` fee

overLimitTransferIncreasesLimitUsage = script do
  let fee = Satoshi 1
      overLimitAmount = satoshiLimit `plus` Satoshi 1000
  (parties, contracts, goodAddress, _) <- onboarding

  (transferRequestCid, utxoCid) <- getTransferAndUTXO parties contracts goodAddress overLimitAmount fee

  transferRequestResult <- parties.operator `submit` exerciseCmd transferRequestCid ValidateRequest

  failedRequestCid <- case transferRequestResult of
    LimitFail failedRequestCid -> pure failedRequestCid
    ValidationSuccess _ -> fail "expected failure due to limit violation, but limit check successfully passed"
    ReputationFail _ -> fail "expected transfer request to be valid, but failed address check"
  (approvedRequestCid, _) <- parties.deskHead `submit` exerciseCmd contracts.deskHeadCid ApproveRequestOverLimits with
    failedRequestCid = failedRequestCid
    reason = "Desk head overrides limit failure"
    observers = []
  validRequestCid <- case approvedRequestCid of
    Right validRequestCid -> pure validRequestCid
    _ -> fail "expected transfer request to be valid, but failed address check"
  parties.operator `submit` exerciseCmd validRequestCid PrepareToTransfer with
    signingPartyCid = contracts.signCid
    fee = fee
    availableTxInputCids = [utxoCid]
  newLimit <- findNewLimit parties contracts
  newLimit.used === overLimitAmount `plus` fee

badAddressTransferIncreasesLimitUsage = script do
  let fee = Satoshi 1
      overLimitAmount = Satoshi 1000
  (parties, contracts, _, badAddress) <- onboarding

  (transferRequestCid, utxoCid) <- getTransferAndUTXO parties contracts badAddress overLimitAmount fee

  transferRequestResult <- parties.operator `submit` exerciseCmd transferRequestCid ValidateRequest

  failedRequestCid <- case transferRequestResult of
    ReputationFail failedRequestCid -> pure failedRequestCid
    ValidationSuccess _ -> fail "expected failure due to limit violation, but limit check successfully passed"
    LimitFail _ -> fail "expected transfer request to be within limit, but limit check failed"
  (approvedRequestCid, _) <- parties.complianceOfficer `submit` exerciseCmd contracts.complCid ApproveRequestToBadAddress with
    failedRequestCid = failedRequestCid
    reason = "Compliance officer trusts this address"
    observers = []
  parties.operator `submit` exerciseCmd approvedRequestCid PrepareToTransfer with
    signingPartyCid = contracts.signCid
    fee = fee
    availableTxInputCids = [utxoCid]
  newLimit <- findNewLimit parties contracts
  newLimit.used === overLimitAmount `plus` fee

findNewLimit : ScriptPartiesHelper -> ScriptContractsHelper -> Script TransferLimit
findNewLimit parties contracts = script do
  Some deskHeadRole <- queryContractId parties.operator contracts.deskHeadCid
  (_, newLimit) <- parties.operator `submit` createAndExerciseCmd (Helper parties.operator) (FetchTransferLimitByKey (parties.operator, parties.deskHead, deskHeadRole.deskName))
  pure newLimit

template Helper
  with
    p : Party
  where
    signatory p
    choice FetchTransferLimitByKey : (ContractId TransferLimit, TransferLimit)
      with k : (Party, Party, Text)
      controller p
      do fetchByKey @TransferLimit k